[{"content":"Horaire et Lieu Le Mardi de 18h à 20h à la MPT de Landerneau.\nAu programme Faire tourner un LLM en local sur un PC. Conception d\u0026rsquo;une page HTML avec du JS pour le dynamisme. Utilisation du Module Python HTTP.Server (Serveur Web Local). Références Ollama | Pour executer des LLMs en local. Wikipedia - Grand Modèle de Langage. Github - mozilla-Ocho - llamafile | LinuxFr - Introduction aux LMMs. W3Schools - HTML Tutorial | Pour le contenu de la page web. W3Schools - CSS Tutorial | Pour la mise en forme de la page web. W3Schools - HTML DOM Events | Pour contrôler les évenements de la page web. W3Schools - CSS Animations | Afin d\u0026rsquo;ajouter des animations CSS. W3Shools - CSS Transitions | Afin d\u0026rsquo;ajouter des transitions en CSS. ","date":"2024-06-11T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2024-06-11/","title":"Séance du 11 Juin 2024"},{"content":"Horaire et Lieu Le Samedi de 10h à 12h à la MPT de Landerneau.\nAu programme Conception d\u0026rsquo;une page HTML avec du JavaScript pour le dynamisme. Utilisation du Module Python HTTP.Server (Serveur Web Local). Travaux Pratiques Création du répertoire et fichier HTML Nous nous déplaçons dans notre répertoire de travail\n1 cd travail Nous y créons un répertoire appelé serveurweb\n1 mkdir serveurweb Nous nous déplaçons dans le répertoire créé\n1 cd serveurweb Nous créons un fichier \u0026ldquo;index.html\u0026rdquo;\n1 touch index.html Ouvrons le fichier \u0026ldquo;index.html\u0026rdquo; Nous ouvrons le fichier \u0026ldquo;index.html\u0026rdquo; avec notre editeur de texte\n1 nano index.html Ajoutons du contenu HTML 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Ma Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Ma page Web\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Démarrons le serveur web Nous utilisons la librairie HTTP de Python\n1 python -m http.server 8080 Affichons la page web dans notre navigateur Ouvrons notre navigateur et tapons : http://localhost:8080.\nModifions notre page HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Ma Page\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { color: red; text-align: center; } #vert { color: chartreuse; text-align: center; } div { width: 100px; height: 100px; background-color: red; position: relative; animation-name: example; animation-duration: 4s; animation-delay: 2s; } @keyframes example { 0% { left:0px; top:0px; background-color:red; } 25% { left:200px; top:0px; background-color:yellow; } 50% { left:200px; top:200px; background-color:blue; } 75% { left:0px; top:200px; background-color:green; } 100% { left:0px; top:0px; background-color:red; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Ma page Web\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Je fais du vélo\u0026lt;/p\u0026gt; \u0026lt;h1 id=\u0026#34;vert\u0026#34;\u0026gt;Ma page Web Titre 2\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Références Github - Hugo | Générateur de Site Statique écrit en Golang. Shamacher - Brachiograph | Stylo traceur simple et intuitif. Flask - Documentation | Micro Framework en Python. Nicegui | Un framework Python pour faire des interfaces web. ","date":"2024-05-25T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2024-05-25/","title":"Séance du 25 Mai 2024"},{"content":"Horaire et Lieu Mardi de 18h à 20h à la MPT de Landerneau.\nAu programme Comment ça marche: Large Language Model (LLM): tokenizer. Avec des exemples. BrachioGraph intégration Travaux Pratiques Exercice numéro #1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Nous nous déplaçons dans le répertoire de travail cd travail # Nous créons un répertoire \u0026#34;llm\u0026#34; mkdir llm # Nous nous déplaçons dans ce dernier cd llm # Nous créons un environnement virtuel python3 -m venv .venv # Nous activons l\u0026#39;environnement virtuel source .venv/bin/activate # Procédons à l\u0026#39;installation de la bibliothèque Tiktoken # Code source de la bibliothèque : https://github.com/openai/tiktoken # transformer des mots en nombres pour un traitement numérique de données pip install tiktoken # A présent créons le fichier pour y mettre du code touch test_tiktoken.py # Editons ce dernier nano test_tiktoken.py Exercice numéro #1 - Code Source 1 2 3 4 5 6 7 8 9 10 11 import tiktoken # Nous importons la bibliothèque tiktoken. encoding_gpt2 = tiktoken.encoding_for_model(\u0026#34;gpt-2\u0026#34;) # Au premier démmarage: télécharge le vocabulaire GPT-2. print(encoding_gpt2.encode(\u0026#34;The quick brown fox jumps over the lazy dog.\u0026#34;)) # résultat: [464, 2068, 7586, 21831, 18045, 625, 262, 16931, 3290, 13] print(encoding_gpt2.decode([464, 2068, 7586, 21831, 18045, 625, 262, 16931, 3290, 13])) # résultat: The quick brown fox jumps over the lazy dog. Exercice numéro #2 1 2 3 4 5 6 # Installons la bibliothèque NumPy pip install numpy # Créons le fichier contenant le code Python touch cosine_similarity_part1.py # Editons le fichier nano cosine_similarity_part1.py Exercice numéro #2 - Code Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import numpy as np # Define the vectors Vx = np.array([0, 1, 0, 1, 0, 1, 1, 0]) Vy = np.array([0, 0, 0, 1, 1, 1, 1, 0]) # Function to calculate cosine similarity def cosine_similarity(vector1, vector2): # Calculate the dot product dot_product = np.dot(vector1, vector2) # Calculate the norms of each vector norm1 = np.linalg.norm(vector1) norm2 = np.linalg.norm(vector2) # Calculate the cosine similarity cosine_sim = dot_product / (norm1 * norm2) return cosine_sim # Calculate and print the cosine similarity similarity = cosine_similarity(Vx, Vy) print(f\u0026#34;Cosine similarity (Vx,Vy): {similarity}\u0026#34;) Exercice numéro #3 1 2 3 4 5 6 # Installons la bibliothèque scikit-learn pip install scikit-learn # Création du fichier contenant le code source touch cosine_similarity_part2.py # Ouverture du fichier pour l\u0026#39;ajout du code nano cosine_similarity_part2.py Exercice numéro #3 - Code Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity^ sentences = [ \u0026#34;I am fond of reading thriller novels.\u0026#34;, # x \u0026#34;I prefer reading thriller novels.\u0026#34;, # y \u0026#34;Yesterday, I arrived late.\u0026#34; # z ] # Initialize a TF-IDF Vectorizer vectorizer = TfidfVectorizer() # Fit and transform the sentences to a TF-IDF matrix tfidf_matrix = vectorizer.fit_transform(sentences) # Compute the cosine similarity matrix cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix) print(\u0026#34;Cosine Similarity Matrix:\\n\u0026#34;, cosine_sim) Références Wikipedia - Large Langage Model. Github - Tiktoken. HuggingFace - Site. LinuxFr - Intro aux LLMs. GPT Tokenizer - Site. HuggingFace - The Tokenizer Playground. Algebrica - Cosine Similarity. Schoolmouv - Site. Github - Whisper.cpp | Real-time transcription on Raspberry Pi 4. Miguel Gringberg - Blog | How LLMs work explained without math. Scikit Learn - Site. ","date":"2024-05-14T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2024-05-14/","title":"Séance du 14 Mai 2024"},{"content":"Horaire et Lieu Samedi de 10h à 12h à la MPT de Landerneau.\nAu programme Utilisation de la bibliothèque OpenCV. Capture 3D Conception 3D. Travaux Pratiques Exercice numéro #1 - Code Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import cv2 video_capture = cv2.VideoCapture(0) while True: result, video_frame = video_capture.read() # read frames from the video if result is False: break # terminate the loop if the frame is not read successfully cv2.imshow( \u0026#34;USB Camera Test\u0026#34;, video_frame ) if cv2.waitKey(1) \u0026amp; 0xFF == ord(\u0026#34;q\u0026#34;): break video_capture.release() cv2.destroyAllWindows() Références Randomnertutorials | Set up USB camera OpenCV Raspberry Pi. SpaceMath GSFC Nasa | Astrophotography PDF. PythonCheatSheet | Python chr() built-in function. ","date":"2024-04-27T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2024-04-27/","title":"Séance du 27 Avril 2024"},{"content":"Horaire et Lieu Samedi matin de 10h à 12h à la MPT de Landerneau.\nAu Programme Tour de table (suite). Présentation de l\u0026rsquo;Atelier (suite). Présentation du Raspberry Pi Système d\u0026rsquo;Exploitation. Présenration de Python Installation de l\u0026rsquo;environnement. Utilisation de l\u0026rsquo;application Thonny (éditeur pour Python). Premier programme en Python. Utilisation de la ligne de commande. ls - pour lister les fichiers. cd - pour se déplacer dans un répertoire. Travaux Pratiques Création d\u0026rsquo;un premier programme en Python\n1 2 3 4 # Nous créons le fichier touch bonjour.py # Nous l\u0026#39;éditons nano bonjour.py Code Source Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Déclaration des variables mon_nom = \u0026#34;Kevin\u0026#34; mon_age = 25 ma_température = 37.2 # Affichage des variables print(\u0026#34;mon nom est: \u0026#34;, mon_nom) print(\u0026#34;mon age est: \u0026#34;, mon_age) print(\u0026#34;ma temperature est: \u0026#34;, ma_temperature) print(f\u0026#34;mon nom est {mon_nom}, mon age {mon_age}\u0026#34;) # Si la variable mon_age est supérieure ou égale à 18 alors if mon_age \u0026gt;= 18: # Nous affichons que la personne est majeure print(\u0026#34;vous êtes majeur\u0026#34;) # Sinon else: # Nous affichons que la personne est mineure print(\u0026#34;vous êtes mineur\u0026#34;) Références Wikipedia | Concept de Fichiers et de Répertoires. Thonny | IDE pour programmer en Python. WayToLearnX | Tutoriel Python. Python Docs | Python sortie et chaîne de caractères formatée. FormaTux | Les fondamentaux GNU/Linux. MIT - Terminus | Jeu pour apprendre les commandes Linux. OverTheWire - Wargames Bandit | CTF pour les débutants. ","date":"2023-09-23T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2023-09-23/","title":"Séance du 23 Septembre 2023"},{"content":"Horaire et Lieu Mardi de 18h à 20h à la MPT de Landerneau.\nPremière séance annuelle. Au Programme Tour de table pour les nouveaux adhérents. Présentation de l\u0026rsquo;Atelier (Programme). Présentation de la Raspberry Pi. Présentation de GNU/Linux (Noyau et Système d\u0026rsquo;Exploitation). Présentation de Python (Langage de Programmation). Références FunMooc | Apprendre a coder avec Python. Unik Informatique | PC reconditionnés à Brest. Youtube - Docstring | Apprendre Python de A a Z (Vidéo de 7h). WikiLivres | Programmation Python. Fullcirclemag | Magazine autour de la communauté Ubuntu Linux (gratuit). Inforef | Apprendre à programmer avec Python 3 (PDF). RaspberryPi - MagPi | Livres sur la Raspberry Pi et autre (gratuit). Framboise314 | Blog Français de référence sur le Raspberry Pi. Magasins en ligne qui vendent le Raspberry Pi Kubii | Distributeur officiel, Kits Raspberry Pi 3 et 3+. Gotronic | Recherche Raspberry. Brachiograph - Documentation | Exemple de projet. ","date":"2023-09-12T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2023-09-12/","title":"Séance du 12 Septembre 2023"},{"content":"Horaire et Lieu Samedi de 09h à 17h au Carrefour des Associations de Landerneau.\nAu programme Présence au carrefour des associations de Landerneau. Pour présenter, discuter sur, les Raspberry Pi. Prendre les adhésions des nouveaux participants à l\u0026rsquo;atelier. ","date":"2023-09-02T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2023-09-02/","title":"Séance du 02 Septembre 2023"},{"content":"Horaire et Lieu Samedi matin de 10h à 12h à la MPT de Landerneau.\nAu programme Actualités Tech. Les différents usages de la Raspberry Pi. Faire un Point d\u0026rsquo;Accès WIFI avec la Raspberry Pi. Fabriquer une console Rétro. Faire un Média Server. Références Raspap | Pour faire un Point d\u0026rsquo;Accès WIFI. Pi-Hole | Pour faire un bloqueur de publicité en mode DNS. Recalbox | Pour faire une console Retro. Home-Assistant | Pour faire un serveur central de domotique. KodiTV | Pour faire un centre multimédia. ","date":"2023-06-24T00:00:00Z","permalink":"https://rpi-landerne.github.io/seance/2023-06-24/","title":"Séance du 24 Juin 2023"}]